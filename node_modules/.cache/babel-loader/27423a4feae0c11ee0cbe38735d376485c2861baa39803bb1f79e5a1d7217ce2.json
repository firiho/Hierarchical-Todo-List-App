{"ast":null,"code":"var _jsxFileName = \"/Volumes/LaCie/Code/Kanban Web Application/src/pages/NewTaskPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode'; // Corrected import for jwt-decode\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NewTaskPage = () => {\n  _s();\n  // if token is not present, redirect to login page\n  if (!localStorage.getItem('token')) {\n    window.location.href = '/login';\n  }\n  const [nextId, setNextId] = useState(10000000);\n  const [isLoading, setIsLoading] = useState(true);\n  const [numSub, setNumSub] = useState(1);\n  const [numSubSub, setNumSubSub] = useState(0);\n  useEffect(() => {\n    const getNextTaskId = async () => {\n      setIsLoading(true);\n      try {\n        const response = await fetch('http://127.0.0.1:5000/next-id', {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          setNextId(data.next_id);\n          setIsLoading(false); // Update loading state based on data fetch\n        } else {\n          throw new Error('Network response was not ok.');\n        }\n      } catch (error) {\n        console.error('Failed to fetch nextId:', error);\n      } finally {\n        setIsLoading(false); // Correctly updating state, not a hook call\n      }\n    };\n    getNextTaskId();\n  }, []);\n  useEffect(() => {\n    console.log('Next ID:', nextId);\n  }, [nextId]);\n  let tempId = 100000000;\n  // State to hold the main task and its subtasks\n  const [tasks, setTasks] = useState([{\n    id: nextId,\n    title: '',\n    subtasks: [{\n      id: nextId + 1,\n      title: '',\n      subsubtasks: [{\n        id: tempId,\n        title: ''\n      }]\n    }]\n  }]);\n  const getCurrentUserId = () => {\n    const token = localStorage.getItem('token');\n    if (!token) return null;\n    try {\n      const decodedToken = jwtDecode(token);\n      return decodedToken.sub.identity;\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      return null;\n    }\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    // Assuming you have a way to get the current user's ID\n    const userId = getCurrentUserId(); // You need to implement this based on your auth system\n\n    let currentId = nextId; // Initialize currentId with the base ID provided\n\n    function collectAndOrderTasks(tasks, userId) {\n      let mainTasks = [];\n      let subTasks = [];\n      let subSubTasks = [];\n\n      // Collect main tasks\n      tasks.forEach(task => {\n        mainTasks.push({\n          ...task,\n          parent_id: null,\n          user_id: userId\n        });\n\n        // Collect subtasks\n        task.subtasks.forEach(subtask => {\n          subTasks.push({\n            ...subtask,\n            parent_id: nextId,\n            user_id: userId\n          });\n\n          // Collect sub-subtasks\n          let i = 1;\n          subtask.subsubtasks.forEach(subsubtask => {\n            subSubTasks.push({\n              ...subsubtask,\n              parent_id: nextId + i,\n              user_id: userId\n            });\n            i = i + 1;\n          });\n        });\n      });\n\n      // Concatenate all tasks in the desired order\n      return [...mainTasks, ...subTasks, ...subSubTasks];\n    }\n\n    // Usage\n    const flattenedTasks = collectAndOrderTasks(tasks, userId);\n    console.log('Flattened tasks:', flattenedTasks);\n    // try {\n    //   const response = await fetch('http://127.0.0.1:5000/new-list', {\n    //     method: 'POST',\n    //     headers: {\n    //       'Content-Type': 'application/json',\n    //       // Include auth token if needed\n    //     },\n    //     body: JSON.stringify(flattenedTasks),\n    //   });\n\n    //   if (!response.ok) throw new Error('Network response was not ok.');\n    //   // Handle success\n    //   console.log('Tasks successfully submitted:', await response.json());\n    //   window.location.href = '/'; // Redirect to the dashboard\n    // } catch (error) {\n    //   console.error('Error submitting tasks:', error);\n    // }\n  };\n\n  // Function to add a new subtask or sub-subtask\n  const addSubTask = (taskId, subtaskId = null) => {\n    setTasks(tasks.map(task => {\n      if (task.id === taskId) {\n        if (subtaskId === null) {\n          const newSubtaskId = tempId + numSub;\n          console.log('newSubtaskId:', newSubtaskId);\n          task.subtasks.push({\n            id: newSubtaskId,\n            title: '',\n            subsubtasks: []\n          });\n          setNumSub(numSub + 1);\n        } else {\n          task.subtasks.forEach(subtask => {\n            if (subtask.id === subtaskId) {\n              const newsubsubtaskid = tempId + numSub;\n              console.log('newsubsubtaskid:', newsubsubtaskid);\n              subtask.subsubtasks.push({\n                id: newsubsubtaskid,\n                title: ''\n              });\n              setNumSub(numSub + 1);\n            }\n          });\n        }\n      }\n      return task;\n    }));\n  };\n\n  // Function to handle task title change\n  const handleTaskChange = (taskId, subtaskId, subsubtaskId, value) => {\n    setTasks(tasks.map(task => {\n      if (task.id === taskId) {\n        if (subtaskId === null) {\n          task.title = value;\n        } else {\n          task.subtasks.forEach(subtask => {\n            if (subtask.id === subtaskId) {\n              if (subsubtaskId === null) {\n                subtask.title = value;\n              } else {\n                subtask.subsubtasks.forEach(subsubtask => {\n                  if (subsubtask.id === subsubtaskId) {\n                    subsubtask.title = value;\n                  }\n                });\n              }\n            }\n          });\n        }\n      }\n      return task;\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-task-page\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add New Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [tasks.map((task, taskIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            required: true,\n            type: \"text\",\n            name: `title-${task.id}`,\n            placeholder: \"Title\",\n            value: task.title,\n            onChange: e => handleTaskChange(task.id, null, null, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => addSubTask(task.id),\n            children: \"Add Subtask\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this), task.subtasks.map(subtask => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              required: true,\n              type: \"text\",\n              name: `title-${subtask.id}`,\n              placeholder: \"Subtask Title\",\n              value: subtask.title,\n              onChange: e => handleTaskChange(task.id, subtask.id, null, e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => addSubTask(task.id, subtask.id),\n              children: \"Add Sub-Subtask\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 19\n            }, this), subtask.subsubtasks.map(subsubtask => /*#__PURE__*/_jsxDEV(\"input\", {\n              required: true,\n              type: \"text\",\n              name: `title-${subsubtask.id}`,\n              placeholder: \"Sub-Subtask Title\",\n              value: subsubtask.title,\n              onChange: e => handleTaskChange(task.id, subtask.id, subsubtask.id, e.target.value)\n            }, subsubtask.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 21\n            }, this))]\n          }, subtask.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 17\n          }, this))]\n        }, task.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(NewTaskPage, \"5fLDJoMnhcxds+/SJsXel7dREHw=\");\n_c = NewTaskPage;\nexport default NewTaskPage;\nvar _c;\n$RefreshReg$(_c, \"NewTaskPage\");","map":{"version":3,"names":["React","useState","useEffect","Link","jwtDecode","jsxDEV","_jsxDEV","Fragment","_Fragment","NewTaskPage","_s","localStorage","getItem","window","location","href","nextId","setNextId","isLoading","setIsLoading","numSub","setNumSub","numSubSub","setNumSubSub","getNextTaskId","response","fetch","method","headers","ok","data","json","next_id","Error","error","console","log","tempId","tasks","setTasks","id","title","subtasks","subsubtasks","getCurrentUserId","token","decodedToken","sub","identity","handleSubmit","event","preventDefault","userId","currentId","collectAndOrderTasks","mainTasks","subTasks","subSubTasks","forEach","task","push","parent_id","user_id","subtask","i","subsubtask","flattenedTasks","addSubTask","taskId","subtaskId","map","newSubtaskId","newsubsubtaskid","handleTaskChange","subsubtaskId","value","children","to","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","taskIndex","required","type","name","placeholder","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Volumes/LaCie/Code/Kanban Web Application/src/pages/NewTaskPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode'; // Corrected import for jwt-decode\n\nconst NewTaskPage = () => {\n    // if token is not present, redirect to login page\n    if (!localStorage.getItem('token')) {\n        window.location.href = '/login';\n    }\n  const [nextId, setNextId] = useState(10000000); \n  const [isLoading, setIsLoading] = useState(true); \n  const [numSub, setNumSub] = useState(1);\n  const [numSubSub, setNumSubSub] = useState(0);\n\n  useEffect(() => {\n    const getNextTaskId = async () => {\n        setIsLoading(true);\n      try {\n        const response = await fetch('http://127.0.0.1:5000/next-id', {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n        if (response.ok) {\n        const data = await response.json();\n        setNextId(data.next_id);\n        setIsLoading(false); // Update loading state based on data fetch\n        } else {\n          throw new Error('Network response was not ok.');\n        }\n      } catch (error) {\n        console.error('Failed to fetch nextId:', error);\n      } finally {\n        setIsLoading(false); // Correctly updating state, not a hook call\n      }\n    };\n\n    getNextTaskId();\n  }, []);\n\n  useEffect(() => {\n    console.log('Next ID:', nextId);\n  }, [nextId]);\n\n\n\n    let tempId = 100000000;\n  // State to hold the main task and its subtasks\n  const [tasks, setTasks] = useState([\n    { id: nextId, title: '', subtasks: [{ id: nextId + 1, title: '', subsubtasks: [{ id: tempId, title: '' }] }] },\n  ]);\n\n  const getCurrentUserId = () => {\n    const token = localStorage.getItem('token');\n    if (!token) return null;\n    try {\n      const decodedToken = jwtDecode(token);\n      return decodedToken.sub.identity; \n    } catch (error) {\n      console.error('Error decoding token:', error);\n      return null;\n    }\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    // Assuming you have a way to get the current user's ID\n    const userId = getCurrentUserId(); // You need to implement this based on your auth system\n\n    let currentId = nextId; // Initialize currentId with the base ID provided\n\n    function collectAndOrderTasks(tasks, userId) {\n        let mainTasks = [];\n        let subTasks = [];\n        let subSubTasks = [];\n    \n        // Collect main tasks\n        tasks.forEach(task => {\n            mainTasks.push({ ...task, parent_id: null, user_id: userId });\n            \n            // Collect subtasks\n            task.subtasks.forEach(subtask => {\n                subTasks.push({ ...subtask, parent_id: nextId, user_id: userId });\n    \n                // Collect sub-subtasks\n                let i = 1;\n                subtask.subsubtasks.forEach(subsubtask => {\n                    subSubTasks.push({ ...subsubtask, parent_id: nextId + i, user_id: userId });\n                    i = i + 1;\n                });\n            });\n        });\n    \n        // Concatenate all tasks in the desired order\n        return [...mainTasks, ...subTasks, ...subSubTasks];\n    }\n\n    \n\n// Usage\nconst flattenedTasks = collectAndOrderTasks(tasks, userId);\n\n\n      console.log('Flattened tasks:', flattenedTasks);\n    // try {\n    //   const response = await fetch('http://127.0.0.1:5000/new-list', {\n    //     method: 'POST',\n    //     headers: {\n    //       'Content-Type': 'application/json',\n    //       // Include auth token if needed\n    //     },\n    //     body: JSON.stringify(flattenedTasks),\n    //   });\n\n    //   if (!response.ok) throw new Error('Network response was not ok.');\n    //   // Handle success\n    //   console.log('Tasks successfully submitted:', await response.json());\n    //   window.location.href = '/'; // Redirect to the dashboard\n    // } catch (error) {\n    //   console.error('Error submitting tasks:', error);\n    // }\n};\n    \n  // Function to add a new subtask or sub-subtask\n  const addSubTask = (taskId, subtaskId = null) => {\n    setTasks(tasks.map(task => {\n      if (task.id === taskId) {\n        if (subtaskId === null) {\n          const newSubtaskId = tempId + numSub;\n          console.log('newSubtaskId:', newSubtaskId);\n          task.subtasks.push({ id: newSubtaskId, title: '', subsubtasks: [] });\n            setNumSub(numSub + 1);\n        } else {\n          task.subtasks.forEach(subtask => {\n            if (subtask.id === subtaskId) {\n              const newsubsubtaskid = tempId + numSub;\n                console.log('newsubsubtaskid:', newsubsubtaskid);\n              subtask.subsubtasks.push({ id: newsubsubtaskid, title: '' });\n              setNumSub(numSub + 1);\n            }\n          });\n        }\n      }\n      return task;\n    }));\n  };\n  \n\n  // Function to handle task title change\n  const handleTaskChange = (taskId, subtaskId, subsubtaskId, value) => {\n    setTasks(tasks.map(task => {\n      if (task.id === taskId) {\n        if (subtaskId === null) {\n          task.title = value;\n        } else {\n          task.subtasks.forEach(subtask => {\n            if (subtask.id === subtaskId) {\n              if (subsubtaskId === null) {\n                subtask.title = value;\n              } else {\n                subtask.subsubtasks.forEach(subsubtask => {\n                  if (subsubtask.id === subsubtaskId) {\n                    subsubtask.title = value;\n                  }\n                });\n              }\n            }\n          });\n        }\n      }\n      return task;\n    }));\n  };\n  \n  return (\n    <>\n      <nav>\n        <Link to=\"/\">Home</Link>\n      </nav>\n\n      <div className=\"new-task-page\">\n        <h2>Add New Task</h2>\n        <form onSubmit={handleSubmit}>\n          {tasks.map((task, taskIndex) => (\n            <div key={task.id}>\n              <input\n                required\n                type=\"text\"\n                name={`title-${task.id}`}\n                placeholder=\"Title\"\n                value={task.title}\n                onChange={(e) => handleTaskChange(task.id, null, null, e.target.value)}\n              />\n              <button type=\"button\" onClick={() => addSubTask(task.id)}>Add Subtask</button>\n\n              {task.subtasks.map((subtask) => (\n                <div key={subtask.id}>\n                  <input\n                    required\n                    type=\"text\"\n                    name={`title-${subtask.id}`}\n                    placeholder=\"Subtask Title\"\n                    value={subtask.title}\n                    onChange={(e) => handleTaskChange(task.id, subtask.id, null, e.target.value)}\n                  />\n                  <button type=\"button\" onClick={() => addSubTask(task.id, subtask.id)}>Add Sub-Subtask</button>\n\n                  {subtask.subsubtasks.map((subsubtask) => (\n                    <input\n                        key={subsubtask.id}\n                        required\n                        type=\"text\"\n                        name={`title-${subsubtask.id}`}\n                        placeholder=\"Sub-Subtask Title\"\n                        value={subsubtask.title}\n                        onChange={(e) => handleTaskChange(task.id, subtask.id, subsubtask.id, e.target.value)}\n                    />\n                ))}\n                </div>\n              ))}\n            </div>\n          ))}\n          <button type=\"submit\">Add Task</button>\n        </form>\n        </div>\n    </>\n    );\n};   \n\nexport default NewTaskPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}