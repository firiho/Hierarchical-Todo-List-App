{"ast":null,"code":"var _jsxFileName = \"/Volumes/LaCie/Code/Kanban Web Application/src/pages/NewTaskPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NewTaskPage = () => {\n  _s();\n  // State to hold the main task and its subtasks\n  const [tasks, setTasks] = useState([{\n    id: 1,\n    title: '',\n    subtasks: [{\n      id: 1.1,\n      title: '',\n      subsubtasks: [{\n        id: 1.11,\n        title: ''\n      }]\n    }]\n  }]);\n  const [nextId, setNextId] = useState();\n  const getCurrentUserId = () => {\n    const token = localStorage.getItem('token');\n    if (!token) return null;\n    try {\n      const decodedToken = jwtDecode(token);\n      return decodedToken.sub.identity;\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      return null;\n    }\n  };\n  useEffect(() => {\n    const getNextTaskId = () => {\n      return fetch('http://127.0.0.1:5000/next-id', {\n        // Ensure the URL matches your Flask route\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => response.json()).then(data => data.next_id); // Assuming the response JSON contains `next_id`\n    };\n    getNextTaskId().then(id => setNextId(id));\n    console.log('The next id should be', nextId);\n  }, [nextId]);\n  const handleSubmit = async event => {\n    event.preventDefault();\n    // Assuming you have a way to get the current user's ID\n    const userId = getCurrentUserId(); // You need to implement this based on your auth system\n\n    let currentId = nextId; // Initialize currentId with the base ID provided\n\n    const flattenedTasks = tasks.flatMap(task => {\n      const mainTask = {\n        ...task,\n        parent_id: null,\n        user_id: userId\n      };\n      let subTasksFlattened = task.subtasks.flatMap((subtask, index) => {\n        // Assign a provisional parent_id for subtasks as if they are sequential from nextId\n        let subTaskWithNewParentId = {\n          ...subtask,\n          parent_id: currentId,\n          user_id: userId\n        };\n        let subSubTasksFlattened = subtask.subsubtasks.map((subsubtask, subIndex) => {\n          // Sub-subtasks parent_id follows their parent subtask's assumed new ID\n          return {\n            ...subsubtask,\n            parent_id: currentId + index + 1,\n            user_id: userId\n          };\n        });\n        return [subTaskWithNewParentId, ...subSubTasksFlattened];\n      });\n      return [mainTask, ...subTasksFlattened];\n    });\n    console.log('Flattened tasks:', flattenedTasks);\n    try {\n      const response = await fetch('http://127.0.0.1:5000/new-list', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n          // Include auth token if needed\n        },\n        body: JSON.stringify(flattenedTasks)\n      });\n      if (!response.ok) throw new Error('Network response was not ok.');\n      // Handle success\n      console.log('Tasks successfully submitted:', await response.json());\n      window.location.href = '/'; // Redirect to the dashboard\n    } catch (error) {\n      console.error('Error submitting tasks:', error);\n    }\n  };\n  const tempId = 1000000;\n  // Function to add a new subtask or sub-subtask\n  const addSubTask = (taskId, subtaskId = null) => {\n    setTasks(tasks.map(task => {\n      if (task.id === taskId && subtaskId === null) {\n        const newSubtaskId = nextId; // Assuming nextId is correctly managed and incremented\n        setNextId(prevId => prevId + 1); // Increment nextId for the next use\n        return {\n          ...task,\n          subtasks: [...task.subtasks, {\n            id: newSubtaskId,\n            title: '',\n            subsubtasks: []\n          }]\n        };\n      } else if (task.id === taskId) {\n        return {\n          ...task,\n          subtasks: task.subtasks.map(subtask => {\n            if (subtask.id === subtaskId) {\n              const newSubSubtaskId = nextId;\n              setNextId(prevId => prevId + 1);\n              return {\n                ...subtask,\n                subsubtasks: [...subtask.subsubtasks, {\n                  id: newSubSubtaskId,\n                  title: ''\n                }]\n              };\n            }\n            return subtask;\n          })\n        };\n      }\n      return task;\n    }));\n  };\n\n  // Function to handle task title change\n  const handleTaskChange = (taskId, subtaskId, subsubtaskId, value) => {\n    setTasks(tasks.map(task => {\n      if (task.id === taskId) {\n        if (subtaskId === null) {\n          task.title = value;\n        } else {\n          task.subtasks.forEach(subtask => {\n            if (subtask.id === subtaskId) {\n              if (subsubtaskId === null) {\n                subtask.title = value;\n              } else {\n                subtask.subsubtasks.forEach(subsubtask => {\n                  if (subsubtask.id === subsubtaskId) {\n                    subsubtask.title = value;\n                  }\n                });\n              }\n            }\n          });\n        }\n      }\n      return task;\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-task-page\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add New Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [tasks.map((task, taskIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            required: true,\n            type: \"text\",\n            name: `title-${task.id}`,\n            placeholder: \"Title\",\n            value: task.title,\n            onChange: e => handleTaskChange(task.id, null, null, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => addSubTask(task.id),\n            children: \"Add Subtask\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 15\n          }, this), task.subtasks.map(subtask => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              required: true,\n              type: \"text\",\n              name: `title-${subtask.id}`,\n              placeholder: \"Subtask Title\",\n              value: subtask.title,\n              onChange: e => handleTaskChange(task.id, subtask.id, null, e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => addSubTask(task.id, subtask.id),\n              children: \"Add Sub-Subtask\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 19\n            }, this), subtask.subsubtasks.map(subsubtask => /*#__PURE__*/_jsxDEV(\"input\", {\n              required: true,\n              type: \"text\",\n              name: `title-${subsubtask.id}`,\n              placeholder: \"Sub-Subtask Title\",\n              value: subsubtask.title,\n              onChange: e => handleTaskChange(task.id, subtask.id, subsubtask.id, e.target.value)\n            }, subsubtask.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 21\n            }, this))]\n          }, subtask.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 17\n          }, this))]\n        }, task.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(NewTaskPage, \"pnlYyyNoLTbVaUrTxJqsUFQq1Ks=\");\n_c = NewTaskPage;\nexport default NewTaskPage;\nvar _c;\n$RefreshReg$(_c, \"NewTaskPage\");","map":{"version":3,"names":["React","useState","useEffect","Link","jwtDecode","jsxDEV","_jsxDEV","Fragment","_Fragment","NewTaskPage","_s","tasks","setTasks","id","title","subtasks","subsubtasks","nextId","setNextId","getCurrentUserId","token","localStorage","getItem","decodedToken","sub","identity","error","console","getNextTaskId","fetch","method","headers","then","response","json","data","next_id","log","handleSubmit","event","preventDefault","userId","currentId","flattenedTasks","flatMap","task","mainTask","parent_id","user_id","subTasksFlattened","subtask","index","subTaskWithNewParentId","subSubTasksFlattened","map","subsubtask","subIndex","body","JSON","stringify","ok","Error","window","location","href","tempId","addSubTask","taskId","subtaskId","newSubtaskId","prevId","newSubSubtaskId","handleTaskChange","subsubtaskId","value","forEach","children","to","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","taskIndex","required","type","name","placeholder","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Volumes/LaCie/Code/Kanban Web Application/src/pages/NewTaskPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode';\n\nconst NewTaskPage = () => {\n  // State to hold the main task and its subtasks\n  const [tasks, setTasks] = useState([\n    { id: 1, title: '', subtasks: [{ id: 1.1, title: '', subsubtasks: [{ id: 1.11, title: '' }] }] },\n  ]);\n  const [nextId, setNextId] = useState();\n  const getCurrentUserId = () => {\n    const token = localStorage.getItem('token');\n    if (!token) return null;\n  \n    try {\n      const decodedToken = jwtDecode(token);\n      return decodedToken.sub.identity; \n    } catch (error) {\n      console.error('Error decoding token:', error);\n      return null;\n    }\n  };\n\n  useEffect(() => {\n  const getNextTaskId = () => {\n    return fetch('http://127.0.0.1:5000/next-id', { // Ensure the URL matches your Flask route\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    })\n    .then(response => response.json())\n    .then(data => data.next_id); // Assuming the response JSON contains `next_id`\n};\n    getNextTaskId().then(id => setNextId(id));\n    console.log('The next id should be', nextId);\n  }, [nextId]);\n\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    // Assuming you have a way to get the current user's ID\n    const userId = getCurrentUserId(); // You need to implement this based on your auth system\n\n    let currentId = nextId; // Initialize currentId with the base ID provided\n\nconst flattenedTasks = tasks.flatMap(task => {\n    const mainTask = { ...task, parent_id: null, user_id: userId };\n    let subTasksFlattened = task.subtasks.flatMap((subtask, index) => {\n        // Assign a provisional parent_id for subtasks as if they are sequential from nextId\n        let subTaskWithNewParentId = { ...subtask, parent_id: currentId, user_id: userId };\n        let subSubTasksFlattened = subtask.subsubtasks.map((subsubtask, subIndex) => {\n            // Sub-subtasks parent_id follows their parent subtask's assumed new ID\n            return { ...subsubtask, parent_id: currentId + index + 1, user_id: userId };\n        });\n        return [subTaskWithNewParentId, ...subSubTasksFlattened];\n    });\n    return [mainTask, ...subTasksFlattened];\n});\n      console.log('Flattened tasks:', flattenedTasks);\n    try {\n      const response = await fetch('http://127.0.0.1:5000/new-list', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          // Include auth token if needed\n        },\n        body: JSON.stringify(flattenedTasks),\n      });\n\n      if (!response.ok) throw new Error('Network response was not ok.');\n      // Handle success\n      console.log('Tasks successfully submitted:', await response.json());\n      window.location.href = '/'; // Redirect to the dashboard\n    } catch (error) {\n      console.error('Error submitting tasks:', error);\n    }\n};\n    const tempId = 1000000\n  // Function to add a new subtask or sub-subtask\n  const addSubTask = (taskId, subtaskId = null) => {\n    setTasks(tasks.map(task => {\n      if (task.id === taskId && subtaskId === null) {\n        const newSubtaskId = nextId; // Assuming nextId is correctly managed and incremented\n        setNextId(prevId => prevId + 1); // Increment nextId for the next use\n        return { ...task, subtasks: [...task.subtasks, { id: newSubtaskId, title: '', subsubtasks: [] }] };\n      } else if (task.id === taskId) {\n        return {\n          ...task,\n          subtasks: task.subtasks.map(subtask => {\n            if (subtask.id === subtaskId) {\n              const newSubSubtaskId = nextId;\n              setNextId(prevId => prevId + 1);\n              return { ...subtask, subsubtasks: [...subtask.subsubtasks, { id: newSubSubtaskId, title: '' }] };\n            }\n            return subtask;\n          })\n        };\n      }\n      return task;\n    }));\n  };\n  \n\n  // Function to handle task title change\n  const handleTaskChange = (taskId, subtaskId, subsubtaskId, value) => {\n    setTasks(tasks.map(task => {\n      if (task.id === taskId) {\n        if (subtaskId === null) {\n          task.title = value;\n        } else {\n          task.subtasks.forEach(subtask => {\n            if (subtask.id === subtaskId) {\n              if (subsubtaskId === null) {\n                subtask.title = value;\n              } else {\n                subtask.subsubtasks.forEach(subsubtask => {\n                  if (subsubtask.id === subsubtaskId) {\n                    subsubtask.title = value;\n                  }\n                });\n              }\n            }\n          });\n        }\n      }\n      return task;\n    }));\n  };\n\n  return (\n    <>\n      <nav>\n        <Link to=\"/\">Home</Link>\n      </nav>\n\n      <div className=\"new-task-page\">\n        <h2>Add New Task</h2>\n        <form onSubmit={handleSubmit}>\n          {tasks.map((task, taskIndex) => (\n            <div key={task.id}>\n              <input\n                required\n                type=\"text\"\n                name={`title-${task.id}`}\n                placeholder=\"Title\"\n                value={task.title}\n                onChange={(e) => handleTaskChange(task.id, null, null, e.target.value)}\n              />\n              <button type=\"button\" onClick={() => addSubTask(task.id)}>Add Subtask</button>\n\n              {task.subtasks.map((subtask) => (\n                <div key={subtask.id}>\n                  <input\n                    required\n                    type=\"text\"\n                    name={`title-${subtask.id}`}\n                    placeholder=\"Subtask Title\"\n                    value={subtask.title}\n                    onChange={(e) => handleTaskChange(task.id, subtask.id, null, e.target.value)}\n                  />\n                  <button type=\"button\" onClick={() => addSubTask(task.id, subtask.id)}>Add Sub-Subtask</button>\n\n                  {subtask.subsubtasks.map((subsubtask) => (\n                    <input\n                      key={subsubtask.id}\n                      required\n                      type=\"text\"\n                      name={`title-${subsubtask.id}`}\n                      placeholder=\"Sub-Subtask Title\"\n                      value={subsubtask.title}\n                      onChange={(e) => handleTaskChange(task.id, subtask.id, subsubtask.id, e.target.value)}\n                    />\n                  ))}\n                </div>\n              ))}\n            </div>\n          ))}\n          <button type=\"submit\">Add Task</button>\n        </form>\n        </div>\n    </>\n    );\n};   \n\nexport default NewTaskPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}