{"ast":null,"code":"var _jsxFileName = \"/Volumes/LaCie/Code/Hierarchical Todo List App/src/pages/NewTaskPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jwtDecode } from 'jwt-decode'; // Corrected import for jwt-decode\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewTaskPage = () => {\n  _s();\n  // if token is not present, redirect to login page\n  if (!localStorage.getItem('token')) {\n    window.location.href = '/login';\n  }\n  const {\n    listId\n  } = useParams();\n  const [nextId, setNextId] = useState(10000000);\n  const [numSub, setNumSub] = useState(1);\n  useEffect(() => {\n    const getNextTaskId = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/next-id', {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          setNextId(data.next_id);\n        } else {\n          throw new Error('Network response was not ok.');\n        }\n      } catch (error) {\n        console.error('Failed to fetch nextId:', error);\n      }\n    };\n    getNextTaskId();\n  }, []);\n  let tempId = 100000000;\n  // State to hold the main task and its subtasks\n  const [tasks, setTasks] = useState([{\n    id: nextId,\n    title: '',\n    subtasks: [{\n      id: nextId + 1,\n      title: '',\n      subsubtasks: [{\n        id: tempId,\n        title: ''\n      }]\n    }]\n  }]);\n  const getCurrentUserId = () => {\n    const token = localStorage.getItem('token');\n    if (!token) return null;\n    try {\n      const decodedToken = jwtDecode(token);\n      return decodedToken.sub.identity;\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      return null;\n    }\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    // Assuming you have a way to get the current user's ID\n    const userId = getCurrentUserId(); // You need to implement this based on your auth system\n\n    function collectAndOrderTasks(tasks, userId) {\n      let mainTasks = [];\n      let subTasks = [];\n      let subSubTasks = [];\n\n      // Collect main tasks\n      tasks.forEach(task => {\n        mainTasks.push({\n          ...task,\n          list_id: listId,\n          parent_id: null,\n          user_id: userId\n        });\n\n        // Collect subtasks\n        let i = 1;\n        task.subtasks.forEach(subtask => {\n          subTasks.push({\n            ...subtask,\n            list_id: listId,\n            parent_id: nextId,\n            user_id: userId\n          });\n\n          // Collect sub-subtasks\n\n          subtask.subsubtasks.forEach(subsubtask => {\n            subSubTasks.push({\n              ...subsubtask,\n              list_id: listId,\n              parent_id: nextId + i,\n              user_id: userId\n            });\n          });\n          i = i + 1;\n        });\n      });\n\n      // Concatenate all tasks in the desired order\n      return [...mainTasks, ...subTasks, ...subSubTasks];\n    }\n\n    // Usage\n    const flattenedTasks = collectAndOrderTasks(tasks, userId);\n    console.log('Flattened tasks:', flattenedTasks);\n    try {\n      const response = await fetch('http://127.0.0.1:5000/new-list', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n          // Include auth token if needed\n        },\n        body: JSON.stringify(flattenedTasks)\n      });\n      if (!response.ok) throw new Error('Network response was not ok.');\n      // Handle success\n      console.log('Tasks successfully submitted:', await response.json());\n      window.location.href = '/'; // Redirect to the dashboard\n    } catch (error) {\n      console.error('Error submitting tasks:', error);\n    }\n  };\n\n  // Function to add a new subtask or sub-subtask\n  const addSubTask = (taskId, subtaskId = null) => {\n    setTasks(tasks.map(task => {\n      if (task.id === taskId) {\n        if (subtaskId === null) {\n          const newSubtaskId = tempId + numSub;\n          task.subtasks.push({\n            id: newSubtaskId,\n            title: '',\n            subsubtasks: []\n          });\n          setNumSub(numSub + 1);\n        } else {\n          task.subtasks.forEach(subtask => {\n            if (subtask.id === subtaskId) {\n              const newsubsubtaskid = tempId + numSub;\n              subtask.subsubtasks.push({\n                id: newsubsubtaskid,\n                title: ''\n              });\n              setNumSub(numSub + 1);\n            }\n          });\n        }\n      }\n      return task;\n    }));\n  };\n\n  // Function to handle task title change\n  const handleTaskChange = (taskId, subtaskId, subsubtaskId, value) => {\n    setTasks(tasks.map(task => {\n      if (task.id === taskId) {\n        if (subtaskId === null) {\n          task.title = value;\n        } else {\n          task.subtasks.forEach(subtask => {\n            if (subtask.id === subtaskId) {\n              if (subsubtaskId === null) {\n                subtask.title = value;\n              } else {\n                subtask.subsubtasks.forEach(subsubtask => {\n                  if (subsubtask.id === subsubtaskId) {\n                    subsubtask.title = value;\n                  }\n                });\n              }\n            }\n          });\n        }\n      }\n      return task;\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"new-task-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add New Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form\",\n      children: [tasks.map((task, taskIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          required: true,\n          type: \"text\",\n          name: `title-${task.id}`,\n          placeholder: \"Title\",\n          value: task.title,\n          onChange: e => handleTaskChange(task.id, null, null, e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => addSubTask(task.id),\n          children: \"Add Subtask\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 15\n        }, this), task.subtasks.map(subtask => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            required: true,\n            type: \"text\",\n            name: `title-${subtask.id}`,\n            placeholder: \"Subtask Title\",\n            value: subtask.title,\n            onChange: e => handleTaskChange(task.id, subtask.id, null, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => addSubTask(task.id, subtask.id),\n            children: \"Add Sub-Subtask\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 19\n          }, this), subtask.subsubtasks.map(subsubtask => /*#__PURE__*/_jsxDEV(\"input\", {\n            required: true,\n            type: \"text\",\n            name: `title-${subsubtask.id}`,\n            placeholder: \"Sub-Subtask Title\",\n            value: subsubtask.title,\n            onChange: e => handleTaskChange(task.id, subtask.id, subsubtask.id, e.target.value)\n          }, subsubtask.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 21\n          }, this))]\n        }, subtask.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 17\n        }, this))]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 7\n  }, this);\n};\n_s(NewTaskPage, \"UVtsTlLzTHItxZQEu+uBJeskwPQ=\", false, function () {\n  return [useParams];\n});\n_c = NewTaskPage;\nexport default NewTaskPage;\nvar _c;\n$RefreshReg$(_c, \"NewTaskPage\");","map":{"version":3,"names":["React","useState","useEffect","jwtDecode","useParams","jsxDEV","_jsxDEV","NewTaskPage","_s","localStorage","getItem","window","location","href","listId","nextId","setNextId","numSub","setNumSub","getNextTaskId","response","fetch","method","headers","ok","data","json","next_id","Error","error","console","tempId","tasks","setTasks","id","title","subtasks","subsubtasks","getCurrentUserId","token","decodedToken","sub","identity","handleSubmit","event","preventDefault","userId","collectAndOrderTasks","mainTasks","subTasks","subSubTasks","forEach","task","push","list_id","parent_id","user_id","i","subtask","subsubtask","flattenedTasks","log","body","JSON","stringify","addSubTask","taskId","subtaskId","map","newSubtaskId","newsubsubtaskid","handleTaskChange","subsubtaskId","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","taskIndex","required","type","name","placeholder","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Volumes/LaCie/Code/Hierarchical Todo List App/src/pages/NewTaskPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { jwtDecode } from 'jwt-decode'; // Corrected import for jwt-decode\nimport { useParams } from 'react-router-dom';\n\nconst NewTaskPage = () => {\n    // if token is not present, redirect to login page\n    if (!localStorage.getItem('token')) {\n        window.location.href = '/login';\n    }\n  const { listId } = useParams();\n  const [nextId, setNextId] = useState(10000000); \n  const [numSub, setNumSub] = useState(1);\n\n  useEffect(() => {\n    const getNextTaskId = async () => {\n\n      try {\n        const response = await fetch('http://127.0.0.1:5000/next-id', {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n        if (response.ok) {\n        const data = await response.json();\n        setNextId(data.next_id);\n        } else {\n          throw new Error('Network response was not ok.');\n        }\n      } catch (error) {\n        console.error('Failed to fetch nextId:', error);\n      }\n    };\n\n    getNextTaskId();\n  }, []);\n\n    let tempId = 100000000;\n  // State to hold the main task and its subtasks\n  const [tasks, setTasks] = useState([\n    { id: nextId, title: '', subtasks: [{ id: nextId + 1, title: '', subsubtasks: [{ id: tempId, title: '' }] }] },\n  ]);\n\n  const getCurrentUserId = () => {\n    const token = localStorage.getItem('token');\n    if (!token) return null;\n    try {\n      const decodedToken = jwtDecode(token);\n      return decodedToken.sub.identity; \n    } catch (error) {\n      console.error('Error decoding token:', error);\n      return null;\n    }\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    // Assuming you have a way to get the current user's ID\n    const userId = getCurrentUserId(); // You need to implement this based on your auth system\n\n    function collectAndOrderTasks(tasks, userId) {\n        let mainTasks = [];\n        let subTasks = [];\n        let subSubTasks = [];\n    \n        // Collect main tasks\n        tasks.forEach(task => {\n            mainTasks.push({ ...task, list_id: listId, parent_id: null, user_id: userId });\n            \n            // Collect subtasks\n            let i = 1;\n            task.subtasks.forEach(subtask => {\n                subTasks.push({ ...subtask, list_id: listId, parent_id: nextId, user_id: userId });\n    \n                // Collect sub-subtasks\n                \n                subtask.subsubtasks.forEach(subsubtask => {\n                    subSubTasks.push({ ...subsubtask, list_id: listId, parent_id: nextId + i, user_id: userId });\n                });\n                i = i + 1;\n            });\n        });\n    \n        // Concatenate all tasks in the desired order\n        return [...mainTasks, ...subTasks, ...subSubTasks];\n    }\n\n    \n\n// Usage\nconst flattenedTasks = collectAndOrderTasks(tasks, userId);\n\n\n      console.log('Flattened tasks:', flattenedTasks);\n    try {\n      const response = await fetch('http://127.0.0.1:5000/new-list', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          // Include auth token if needed\n        },\n        body: JSON.stringify(flattenedTasks),\n      });\n\n      if (!response.ok) throw new Error('Network response was not ok.');\n      // Handle success\n      console.log('Tasks successfully submitted:', await response.json());\n      window.location.href = '/'; // Redirect to the dashboard\n    } catch (error) {\n      console.error('Error submitting tasks:', error);\n    }\n};\n    \n  // Function to add a new subtask or sub-subtask\n  const addSubTask = (taskId, subtaskId = null) => {\n    setTasks(tasks.map(task => {\n      if (task.id === taskId) {\n        if (subtaskId === null) {\n          const newSubtaskId = tempId + numSub;\n          task.subtasks.push({ id: newSubtaskId, title: '', subsubtasks: [] });\n            setNumSub(numSub + 1);\n        } else {\n          task.subtasks.forEach(subtask => {\n            if (subtask.id === subtaskId) {\n              const newsubsubtaskid = tempId + numSub;\n              subtask.subsubtasks.push({ id: newsubsubtaskid, title: '' });\n              setNumSub(numSub + 1);\n            }\n          });\n        }\n      }\n      return task;\n    }));\n  };\n  \n\n  // Function to handle task title change\n  const handleTaskChange = (taskId, subtaskId, subsubtaskId, value) => {\n    setTasks(tasks.map(task => {\n      if (task.id === taskId) {\n        if (subtaskId === null) {\n          task.title = value;\n        } else {\n          task.subtasks.forEach(subtask => {\n            if (subtask.id === subtaskId) {\n              if (subsubtaskId === null) {\n                subtask.title = value;\n              } else {\n                subtask.subsubtasks.forEach(subsubtask => {\n                  if (subsubtask.id === subsubtaskId) {\n                    subsubtask.title = value;\n                  }\n                });\n              }\n            }\n          });\n        }\n      }\n      return task;\n    }));\n  };\n  \n  return (\n      <div className=\"new-task-page\">\n        <h2>Add New Task</h2>\n        <form onSubmit={handleSubmit} className='form'>\n          {tasks.map((task, taskIndex) => (\n            <div key={task.id}>\n              <input\n                required\n                type=\"text\"\n                name={`title-${task.id}`}\n                placeholder=\"Title\"\n                value={task.title}\n                onChange={(e) => handleTaskChange(task.id, null, null, e.target.value)}\n              />\n              <button type=\"button\" onClick={() => addSubTask(task.id)}>Add Subtask</button>\n\n              {task.subtasks.map((subtask) => (\n                <div key={subtask.id}>\n                  <input\n                    required\n                    type=\"text\"\n                    name={`title-${subtask.id}`}\n                    placeholder=\"Subtask Title\"\n                    value={subtask.title}\n                    onChange={(e) => handleTaskChange(task.id, subtask.id, null, e.target.value)}\n                  />\n                  <button type=\"button\" onClick={() => addSubTask(task.id, subtask.id)}>Add Sub-Subtask</button>\n\n                  {subtask.subsubtasks.map((subsubtask) => (\n                    <input\n                        key={subsubtask.id}\n                        required\n                        type=\"text\"\n                        name={`title-${subsubtask.id}`}\n                        placeholder=\"Sub-Subtask Title\"\n                        value={subsubtask.title}\n                        onChange={(e) => handleTaskChange(task.id, subtask.id, subsubtask.id, e.target.value)}\n                    />\n                ))}\n                </div>\n              ))}\n            </div>\n          ))}\n          <button type=\"submit\">Add Task</button>\n        </form>\n        </div>\n    );\n};   \n\nexport default NewTaskPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}